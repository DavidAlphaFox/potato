---
- name: Checkout libfixposix git repo
  become: yes
  git:
    dest: '/tmp/libfixposix'
    version: 'v{{ libfixposix_version }}'
    accept_hostkey: yes
    repo: 'https://github.com/sionescu/libfixposix.git'
    force: yes
    depth: 1
#  when: rabbitmq_c_result.stdout != '{{ libfixposix_version }}'
#  notify: 'Delete cache'

- name: Install libfixposix
  become: yes
  shell: >
    autoreconf -i -f &&
    ./configure &&
    make &&
    make install
  args:
    chdir: '/tmp/libfixposix'

- name: ldconfig conf
  become: yes
  template: src=libfixposix.conf.j2 dest=/etc/ld.so.conf.d/libfixposix.conf

- name: refresh ldconfig
  become: yes
  command: ldconfig

# Never fails, return current version if installed
- name: Check SBCL version if installed
  shell: sbcl --version 2>&1
  register: sbcl_version
  ignore_errors: True

- name: Extract pre-compiled SBCL binary
  become: yes
  unarchive: src=http://prdownloads.sourceforge.net/sbcl/sbcl-{{ sbcl_target_version }}-x86-64-linux-binary.tar.bz2 dest=/tmp copy=no
  when: sbcl_version.stdout_lines !='{{ sbcl_target_version }}'

# Install/Upgrade if version don't match
- name: Install/Upgrade SBCL
  become: yes
  command: ./install.sh
  args:
    chdir: /tmp/sbcl-{{ sbcl_target_version }}-x86-64-linux
  when: sbcl_version.stdout_lines !='{{ sbcl_target_version }}'

- name: Create deployment shared directories
  become: yes
  file: path={{ commons.application_path }}/../shared/ state=directory recurse=yes owner=potato group=potato mode=0775
  when: development != true

#- name: Generate potato.cfg
#  become: yes
#  template: src=potato.cfg.j2 dest={{ commons.application_path }}/../shared/potato.cfg owner=potato group=potato mode=0775 backup=yes
#  when: development != true

- name: Generate services definition
  become: yes
  template: src=potato.service.j2 dest=/etc/systemd/system/{{ item.value.system_name}}.service mode=0644
  with_dict: "{{ services }}"

- name: Enable CLISP services
  become: yes
  become_user: root
  command: bash -c 'systemctl enable {{ item.value.system_name }}'
  with_dict: "{{ services }}"

- name: Fetch QL
  become: yes
  become_user: potato
  shell: >
    curl -o quicklisp.lisp https://beta.quicklisp.org/quicklisp.lisp
#  Failed on certificate validation
#  get_url: url=https://beta.quicklisp.org/quicklisp.lisp dest=~/

- name: Install QL
  become: yes
  become_user: potato
  shell: >
    /usr/local/bin/sbcl --non-interactive --disable-debugger --load quicklisp.lisp --eval '(quicklisp-quickstart:install)'
  args:
    creates: quicklisp/setup.lisp

- name: Track QL version
  become: yes
  become_user: potato
  shell: >
    /usr/local/bin/sbcl --non-interactive --disable-debugger --eval '(ql-dist:install-dist "http://beta.quicklisp.org/dist/quicklisp/{{ quicklisp_dist }}/distinfo.txt" :prompt nil :replace t)'
  when: "{{ development }}"

- name: Compile potato.bin
  become: yes
  become_user: potato
  shell:  cd {{ commons.application_path }}; PATH=$PATH:/usr/local/bin {{ commons.application_path }}/tools/build_binary.sh
  when: "{{ development }}"

- name: Compile potato.bin for real this time
  become: yes
  become_user: potato
  shell:  cd {{ commons.application_path }}; PATH=$PATH:/usr/local/bin {{ commons.application_path }}/tools/build_binary.sh
  when: "{{ development }}"

- name: Start Potato services
  become: yes
  service: name={{ item.value.system_name}} state=started
  with_dict: "{{ services }}"
  when: "{{ development }}"


