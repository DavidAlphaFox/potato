---
- name: Link to .sbclrc
  become: yes
  become_user: potato
  file: src={{ commons.application_path }}/.sbclrc dest=~/.sbclrc state=link
  when: development == false

- name: Install QL
  become: yes
  become_user: potato
  command: /usr/local/bin/sbcl --non-interactive --disable-debugger --load /potato/current/deploy/roles/clisp-app/files/quicklisp.lisp --eval "(progn  (quicklisp-quickstart:install :path \"/potato/quicklisp/\") (sb-ext:exit :code 0))"
  args:
    chdir: /potato/current
    creates: "/potato/quicklisp/setup.lisp"

- name: Track QL version if different
  become: yes
  become_user: potato
  shell: >
    /usr/local/bin/sbcl --non-interactive --disable-debugger --eval '(if (string-not-equal (ql-dist:version (ql-dist:dist "quicklisp")) "{{ quicklisp_dist }}") (ql-dist:install-dist "http://beta.quicklisp.org/dist/quicklisp/{{ quicklisp_dist }}/distinfo.txt" :prompt nil :replace t))'

- name: Get local revision
  command: git log -n 1 --pretty=format:"%H"
  args:
    chdir: /potato/current
  register: git_commit_local

- name: Publish build id
  become: true
  template: src=build-id.lisp.j2 dest=/potato/current/src/potato/build-id.lisp group=potato owner=potato mode="u+rw,g+rw,o-rwx"


- name: Compile potato.bin
  become: yes
  become_user: potato
  shell: >
    PATH=$PATH:/usr/local/bin;
    cd {{ commons.application_path }};
    {{ commons.application_path }}/tools/build_binary$(if [[ '{{ sso_keytab is defined }}' == 'True' ]] ; then echo -n '_sso'; fi).sh

- name: Compile potato.bin, one more time with feelings
  become: yes
  become_user: potato
  shell: >
    PATH=$PATH:/usr/local/bin;
    cd {{ commons.application_path }};
    {{ commons.application_path }}/tools/build_binary$(if [[ '{{ sso_keytab is defined }}' == 'True' ]] ; then echo -n '_sso'; fi).sh

- name: Init potato.bin
  become: yes
  become_user: potato
  shell: >
    cd {{ commons.application_path }}; ./potato.bin --init -c {{ commons.application_path }}/../shared/potato.cfg

- name: HAProxy disable potato-a backend
  become: yes
  haproxy: state=disabled host=potato_a backend=servers socket=/var/run/haproxy.sock
  register: haproxy_output
  failed_when: "'No such server' in haproxy_output.stdout"

- name: restart potato-a
  become: yes
  service: name=potato-a state=restarted

- name: HAProxy enable potato-a backend
  become: yes
  haproxy: state=enabled host=potato_a backend=servers socket=/var/run/haproxy.sock
  register: haproxy_output
  failed_when: "'No such server' in haproxy_output.stdout"

- name: Pause
  pause: seconds=2

- name: HAProxy disable potato-b backend
  become: yes
  haproxy: state=disabled host=potato_b backend=servers socket=/var/run/haproxy.sock
  register: haproxy_output
  failed_when: "'No such server' in haproxy_output.stdout"

- name: restart potato-b
  become: yes
  service: name=potato-b state=restarted

- name: HAProxy enable backend
  become: yes
  haproxy: state=enabled host=potato_b backend=servers socket=/var/run/haproxy.sock
  register: haproxy_output
  failed_when: "'No such server' in haproxy_output.stdout"

- name: restart potato-index
  become: yes
  service: name=potato-index state=restarted

- name: restart potato-state
  become: yes
  service: name=potato-state state=restarted

- name: restart potato-content-processor
  become: yes
  service: name=potato-content-processor state=restarted

- name: restart potato-email-updates
  become: yes
  service: name=potato-email-updates state=restarted
