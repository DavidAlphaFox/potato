# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ddacunha/CentOS-7.2"
  config.vm.box_check_update = false
  config.vm.define "potato-vagrant-staging" do |potato_vagrant_staging|
  end

  if ENV['http_proxy'] != nil
    puts "-- Using proxy #{ENV['http_proxy']}, make sure the plugin vagrant-proxyconf is installed"
    config.proxy.http     = ENV['http_proxy']
    config.proxy.https    = ENV['http_proxy']
    config.proxy.no_proxy = "localhost,127.0.0.1"
  end

  config.vm.provision "ansible", run: "always" do |ansible|
    ansible.playbook      = `git rev-parse --show-toplevel`.chomp + "/deploy/provisioning.yml"
    ansible.raw_ssh_args = '-o ForwardAgent=yes'
#    ansible.verbose = "vv" # Uncomment to enable ansible verbose
    ansible.extra_vars    = {
      local_user: "#{ENV['USER']}",
      project_local_path: "#{Dir.pwd}/.."
    }
  end

  config.vm.provision "shell", run: "always" do |s|
    s.inline= "pkill -u vagrant sshd"
  end

  config.vm.provision "ansible", run: "always" do |ansible|
    ansible.playbook      = `git rev-parse --show-toplevel`.chomp + "/deploy/deploy.yml"
    ansible.raw_ssh_args = '-o ForwardAgent=yes'

    String branch = "master"
    if ENV['POTATO_DEPLOY_BRANCH'] then
      branch = ENV['POTATO_DEPLOY_BRANCH']
    end
    # ansible.verbose = "vvv" # Uncomment to enable ansible verbose
    ansible.extra_vars    = {
      local_user: "#{ENV['USER']}",
      project_local_path: "#{Dir.pwd}/..",
      deployment_branch: branch
    }
  end

  config.vm.provider "vmware_fusion" do |v|
    v.vmx['displayname'] = 'potato-vagrant-staging'
    v.vmx["memsize"] = "4096"
    v.vmx["numvcpus"] = "4"
  end
end
